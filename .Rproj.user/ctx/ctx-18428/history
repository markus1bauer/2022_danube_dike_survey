)) %>%
mutate(G212_type = if_else(
leanCov >= 1 & leanCov < 25 & targetHerbCov >= 12.5 & targetHerbRichness >= 10, "yes", "no"
)) %>%
mutate(G211_type = if_else(
leanCov >= 1 & leanCov < 25 & targetHerbCov >= 1 & targetHerbRichness >= 5, "yes", "no"
)) %>%
mutate(biotopeType = if_else(
G312_GT6210_type == "yes", "G312-GT6210", if_else(
G214_GE6510_type == "yes", "G214-GE6510", if_else(
G212_LR6510_type == "yes", "G212-LR6510", if_else(
G214_GE00BK_type == "yes", "G214-GE00BK", if_else(
G213_GE00BK_type == "yes", "G213-GE00BK", if_else(
G213_type == "yes", "G213", if_else(
G212_type == "yes", "G212", if_else(
G211_type == "yes", "G211", "other"
))))))))) %>%
mutate(biotopeType = as_factor(biotopeType)) %>%
select(id, biotopeType, -ends_with("proof"), -starts_with("table")) %>%
mutate(ffh6510 = str_match(biotopeType, "6510")) %>%
mutate(ffh6210 = str_match(biotopeType, "6210")) %>%
mutate(baykompv = as_factor(str_sub(biotopeType, start = 1, end = 4))) %>%
unite(ffh, ffh6510, ffh6210, sep = "") %>%
mutate(ffh = str_replace(ffh, "NA", "")) %>%
mutate(ffh = as_factor(str_replace(ffh, "NA", "non-FFH"))) %>%
mutate(biotopeType = as_factor(biotopeType)) %>%
mutate(biotopePoints = if_else(
biotopeType == "G312-GT6210", 13, if_else(
biotopeType == "G214-GE6510", 12, if_else(
biotopeType == "G212-LR6510", 9, if_else(
biotopeType == "G214-GE00BK", 12, if_else(
biotopeType == "G213-GE00BK", 9, if_else(
biotopeType == "G213", 8, if_else(
biotopeType == "G212", 8, if_else(
biotopeType == "G211", 6, 0
))))))))) %>%
mutate(min8 = as_factor(if_else(biotopePoints >= 8, "yes", "no"))) %>%
mutate(min9 = as_factor(if_else(biotopePoints >= 9, "yes", "no")))
sites <- left_join(sites, biotopetypes, by = "id") %>%
#test <- left_join(sites, biotopetypes, by = "id") %>%
# mutate_if(is.factor, as.character) %>%
#select(id, biotopeType.x, biotopeType.y, arrhCov, arrhRichness, leanCov) %>%
#mutate(similar = if_else(biotopeType.x == biotopeType.y, "yes", "no")) %>%
#filter(similar == "no") %>%
#select(-similar)
#rm(test)
select(-targetHerbCov, -arrhCov, -leanCov, -nitrogenCov, -table33Cov, -targetHerbRichness, -arrhRichness, -leanIndicatorRichness, -table33_2Richness, -table33_3Richness, table33_4Richness, table34_2Richness, table34_3Richness)
traits <- traits %>%
select(-targetArrhenatherion, -table30, -table33, -table34, -nitrogenIndicator, -nitrogenIndicator2, leanIndicator)
rm(biotopetypes)
### b Calculate constance -------------------------------------------------------------------------------------------
data <- sites %>%
select(id, plot, surveyYear, ffh) %>%
group_by(plot) %>%
mutate(count = n()) %>%
filter(count == max(count)) %>%
pivot_wider(id_cols = -id, names_from = "surveyYear", values_from = "ffh") %>%  #group_by(plot) %>%
rename(x17 = "2017", x18 = "2018", x19 = "2019") %>%
mutate(changeType = ifelse((x17 == "non-FFH" & x18 != "non-FFH" & x19 != "non-FFH"), "better",
ifelse((x17 != "non-FFH" & x18 == "non-FFH" & x19 != "non-FFH") | (x17 == "non-FFH" & x18 != "non-FFH" & x19 == "non-FFH") | (x17 == "non-FFH" & x18 == "non-FFH" & x19 != "non-FFH") | (x17 != "non-FFH" & x18 != "non-FFH" & x19 == "non-FFH"), "change",
ifelse((x17 == "non-FFH" & x18 == "non-FFH" & x19 == "non-FFH"), "non-FFH",
ifelse(x17 == "6510" & x18 == "6510" & x19 == "6510", "FFH6510",
ifelse(x17 == "6210" & x18 == "6210" & x19 == "6210", "FFH6210",
ifelse(x17 != "non-FFH" & x18 != "non-FFH" & x19 != "non-FFH", "any-FFH", "worse"))))))) %>%
select(plot, changeType)
sites <- data %>%
right_join(sites, by = "plot")
### 5 CWM of Ellenberg #####################################################################################
### a N value -------------------------------------------------------------------------------------------
Ntraits <- traits %>%
select(name, n) %>%
filter(n > 0)
Nspecies <- semi_join(species, Ntraits, by = "name") %>%
pivot_longer(-name, "site", "value") %>%
pivot_wider(site, name) %>%
column_to_rownames("site")
Ntraits <- column_to_rownames(Ntraits, "name")
### Calculate CWM ###
Nweighted <- dbFD(Ntraits, Nspecies, w.abun = T,
calc.FRic = F, calc.FDiv = F, corr = "sqrt")
### b F value -------------------------------------------------------------------------------------------
Ftraits <- traits %>%
select(name, f) %>%
filter(f > 0)
Fspecies <- semi_join(species, Ftraits, by = "name") %>%
pivot_longer(-name, "site", "value") %>%
pivot_wider(site, name) %>%
column_to_rownames("site")
Ftraits <- column_to_rownames(Ftraits, "name")
### Calculate CWM ###
Fweighted <- dbFD(Ftraits, Fspecies, w.abun = T,
calc.FRic = F, calc.FDiv = F, corr = "sqrt")
### c T value -------------------------------------------------------------------------------------------
Ttraits <- traits %>%
select(name, t) %>%
filter(t > 0)
Tspecies <- semi_join(species, Ttraits, by = "name") %>%
pivot_longer(-name, "site", "value") %>%
pivot_wider(site, name) %>%
column_to_rownames("site")
Ttraits <- column_to_rownames(Ttraits, "name")
### Calculate CWM ###
Tweighted <- dbFD(Ttraits, Tspecies, w.abun = T,
calc.FRic = F, calc.FDiv = F, corr = "sqrt")
### d implement in sites data set -------------------------------------------------------------------------------------------
sites$cwmAbuN <- round(as.numeric(as.character(Nweighted$CWM$n)), 3)
sites$cwmAbuF <- round(as.numeric(as.character(Fweighted$CWM$f)), 3)
sites$cwmAbuT <- round(as.numeric(as.character(Tweighted$CWM$t)), 3)
rm(list=setdiff(ls(), c("sites", "species", "traits")))
### 6 Load functional plant traits #####################################################################################
#### * read LEDA data ####
dataSLA <- data.table::fread("data_raw_LEDA_20210223_sla.txt",
sep = ";",
dec = ".",
skip = 3,
header = T,
select = c("SBS name", "single value [mm^2/mg]"),
) %>%
as_tibble() %>%
rename(name = "SBS name") %>%
rename(sla = "single value [mm^2/mg]") %>%
mutate(name = as_factor(str_replace_all(name, " ", "_")))
dataSM <- data.table::fread("data_raw_LEDA_20210223_seedmass.txt",
sep = ";",
dec = ".",
skip = 3,
header = T,
select = c("SBS name", "single value [mg]"),
) %>%
as_tibble() %>%
rename(name = "SBS name") %>%
rename(seedmass = "single value [mg]") %>%
mutate(name = as_factor(str_replace_all(name, " ", "_")))
dataH <- data.table::fread("data_raw_LEDA_20210223_canopy_height.txt",
sep = ";",
dec = ".",
skip = 3,
header = T,
select = c("SBS name", "single value [m]")
) %>%
as_tibble() %>%
rename(name = "SBS name") %>%
rename(height = "single value [m]") %>%
mutate(name = as_factor(str_replace_all(name, " ", "_")))
data <- full_join(dataSLA, dataSM, by = "name") %>%
full_join(dataH, by = "name")
rm(dataSLA, dataSM, dataH)
##### Synonyms ###
#traits$name[which(!(traits$name %in% data$name))]
#data %>%
#group_by(name) %>%
#summarise(across(where(is.double), ~median(.x, na.rm = T))) %>%
#filter(str_detect(name, "incana"))
traits <- data %>%
mutate(name = fct_recode(name, Centaurea_stoebe = "Centaurea_stoebe_s.lat.")) %>%
mutate(name = fct_recode(name, Carex_praecox_ssp_praecox = "Carex_praecox")) %>%
mutate(name = fct_recode(name, Cerastium_fontanum_ssp_vulgare = "Cerastium_fontanum")) %>%
mutate(name = fct_recode(name, Cerastium_fontanum_ssp_vulgare = "Cerastium_fontanum_s._vulgare")) %>%
mutate(name = fct_recode(name, Cota_tinctoria = "Anthemis_tinctoria")) %>%
mutate(name = fct_recode(name, Cyanus_segetum = "Centaurea_cyanus")) %>%
mutate(name = fct_recode(name, Euphorbia_verrucosa = "Euphorbia_brittingeri")) %>%
mutate(name = fct_recode(name, Helictotrichon_pubescens = "Avenula_pubescens")) %>%
mutate(name = fct_recode(name, Hypochaeris_radicata = "Hypochoeris_radicata")) %>%
mutate(name = fct_recode(name, Jacobaea_vulgaris = "Senecio_vulgaris")) %>%
### Packages ###
library(here)
library(tidyverse)
library(sf)
library(ggmap)
library(mapview)
library(mapedit)
### Start ###
#installr::updateR(browse_news = F, install_R = T, copy_packages = T, copy_Rprofile.site = T, keep_old_packages = T, update_packages = T, start_new_R = F, quit_R = T)
rm(list = ls())
register_google(key = "AIzaSyB5nQU_dgB_kPsQkk-_cq7pA0g1-2qka4E")
setwd(here("data/raw"))
sites <- read_csv("data_raw_sites.csv", col_names = T, na = "na", col_types =
cols(
.default = col_double(),
id = col_factor(),
location = col_factor(),
side = col_factor(),
exposition = col_factor(),
ageCategory = col_factor(),
HCl = col_factor(),
humusLevel = col_factor(),
cnLevel = col_factor(),
phosphorousClass = col_factor(),
potassiumClass = col_factor(),
magnesiumClass = col_character()
)) %>%
select(id, location, RW, HW, constructionYear, sandPerc, phosphorous, phosphorousClass) %>%
st_as_sf(coords = c("RW", "HW"), crs = 31468) %>%
st_transform(4326)
View(sites)
coord <- as_tibble(st_coordinates(sites))
View(coord)
sites2 <- st_drop_geometry(sites) %>%
mutate(lon = coord$X) %>%
mutate(lat = coord$Y) %>%
as_tibble()
View(sites2)
rm(coord)
blocks <- sites2 %>%
group_by(location) %>%
summarise_at(c("lon", "lat", "constructionYear"), mean, na.rm = T) %>%
rename(lon_cent = lon, lat_cent = lat)
sites2 <- left_join(sites2, blocks, by = "location")
sites2 %>%
select(id, lon, lat) %>%
pgirmess::writeGPX(type = "w")
sites2 %>%
select(id, lon, lat) %>%
pgirmess::writeGPX(filename = here("data/prosesed/spatial/plots"), type = "w")
install.packages("pgirmess")
sites2 %>%
select(id, lon, lat) %>%
pgirmess::writeGPX(filename = here("data/prosesed/spatial/plots"), type = "w")
setwd(here("data/processed/spatial"))
sites2 %>%
select(id, lon, lat) %>%
pgirmess::writeGPX(type = "w")
sites2 %>%
select(id, lon, lat) %>%
mutate(id = as.character(id)) %>%
pgirmess::writeGPX(type = "w")
data <- sites2 %>%
select(id, lon, lat) %>%
mutate(id = as.character(id))
pgirmess::writeGPX(data, type = "w")
rgdal::writeOGR(data, layer = "waypoints", driver = "GPX"
dsn = here("data/processed/spatial/plots.gpx"))
