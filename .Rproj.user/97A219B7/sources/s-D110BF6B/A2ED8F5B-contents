dat01 <- read.delim("clipboard", header = T)
dat01$year <- as.factor(dat01$year)

dat01$Sand <- as.factor(dat01$Sand)
dat01$Tiefe <- as.factor(dat01$Tiefe)
dat01$Saatdichte <- as.factor(dat01$Saatdichte)
dat01$Block <- as.factor(dat01$Block)
dat01$ID <- as.factor(dat01$ID)
dat01$frisch_log <- log(dat01$frisch_g.m2)

M1 <- lmer (frisch_log ~ (Sand+Tiefe+Saatdichte+Zieltyp)^2 + (1|Block/Tiefe/Sand), data = dat01)
M1 <- lmer (frisch_log ~ (Sand+Tiefe+Saatdichte+Zieltyp)^2 + (1|Sand:(Tiefe:Block)) + (1|Block), data = dat01)
Anova(M2)
summary(M2)

M2 <- lmer (frisch_log ~ Sand+Tiefe+Saatdichte+Zieltyp + (1|Sand:(Tiefe:Block)) + (1|Block), data = dat01)

anova(M1,M2)

Anova(M2)
summary(M2)
confint(M2, parm = c("(Intercept)","Sand25", "Sand50", "Tiefe30", "Saatdichte8", "ZieltypHTR")) # glmm package


simulationOutput <- simulateResiduals(fittedModel = M2, n = 1000) # DHARMa package
ES <- simulationOutput$scaledResiduals

testUniformity(simulationOutput)
plot(simulationOutput)
testOutliers(simulationOutput)
testDispersion(simulationOutput)
testZeroInflation(simulationOutput)

lsm <- lsmeans(M2, ~ Zieltyp)
cld(lsm,
    alpha=0.05,
    Letters=letters,
    adjust="tukey")

summary(lsm)
summary(pairs(lsm))

r.squaredGLMM(M2) # MuMIn package

# requires packages Cairo, Hmisc

plot_errorbars1 <- function (var = "rel", year = 2018, ymin = NULL, ymax = NULL, label_x = "test", label_y = "test", plot_name = NULL)
{
  dat_plot <- dat01[which(dat01$year == year),]
  dat_plot$year <- droplevels(dat_plot$year)
  
  dat_plot$estimate <- dat_plot[[paste0("Estimate_",var)]]
  dat_plot$lower <- dat_plot[[paste0("lowerCI_",var)]]
  dat_plot$upper <- dat_plot[[paste0("upperCI_",var)]]

  plot_graph <- function()
  {
    par(cex.axis = 1, cex.lab = 1, cex = 1, mgp = c(2.8,1,0), mar = c(4,0,0,0.5))
    
    with(data = dat_plot[which(dat_plot$year == year),], expr = errbar(x = fixed_effects, y = estimate, yminus = lower, yplus = upper, pch=19, col = "black", lwd=1, cap = 10, ylim = c(ymin,ymax), errbar.col = "black"), add = F)
    abline(v=dat_plot$estimate[1]) #

    box() #
    mtext(label_x, side=1, line=2.5)
  }
  
  # naming and exporting plot, requires function export.plot, see above
  plot_path <- file.path("C:","Users","Jakob","Documents","Promotion","Statistik","Experiment_Gesamtschau","Abbildungen",plot_name)
  export.plot(plot_fct = plot_graph, path = plot_path, x=14, y=8,size=10,resol=500,format = "png")
}

plot_errorbars1(var = "abs", 
               year = 2018,
               ymin = 20,
               ymax = 100,
               label_x = "mittlere Wuchsh?he [cm]",
               label_y = "",
               plot_name = "Wuchsh?he_chenalb_2018_L.png")

plot_errorbars_bothyears <- function (var = "rel", ymin = -1, ymax = 2, label_x = "test", label_y = "test", plot_name = NULL, col_gray = "gray70")
{
  dat_plot <- dat01

  dat_plot$estimate <- dat_plot[[paste0("Estimate_",var)]]
  dat_plot$lower <- dat_plot[[paste0("lowerCI_",var)]]
  dat_plot$upper <- dat_plot[[paste0("upperCI_",var)]]
  
  plot_graph <- function()
  {
    par(cex.axis = 1, cex.lab = 1, cex = 1, mgp = c(1,1,0), mar = c(4,0,0,0.5))
    
    with(data = dat_plot[which(dat_plot$year == 2018),], expr = errbar(x = fixed_effects, y = estimate, yminus = lower, yplus = upper, pch=19, col = col_gray, lwd=1, cap = 10, ylim = c(ymin,ymax), errbar.col = col_gray), add = F)
    # bei Bedarf die folgende Zeile ausblenden
    with(data = dat_plot[which(dat_plot$year == 2019),], expr = errbar(x = fixed_effects, y = estimate, yminus = lower, yplus = upper, pch=19, col = "black", lwd=1, cap = 10, ylim = c(ymin,ymax), add = T))
    
    abline(v=dat_plot[which(dat_plot$year == 2018),]$estimate[1], col = col_gray)
    abline(v=dat_plot[which(dat_plot$year == 2019),]$estimate[1])
    
    box()
    text(x = dat_plot[which(dat_plot$year == 2018),]$estimate[1]-15, y = 6.8, labels = "2018", col = col_gray, pos = 4)
    text(x = dat_plot[which(dat_plot$year == 2019),]$estimate[1]+0.2, y = 6.8, labels = "2019", col = "black", pos = 4)
    mtext(label_x, side=1, line=2.5)
  }
  
  # naming and exporting plot, requires function export.plot, see above
  plot_path <- file.path("C:","Users","Jakob","Documents","Promotion","Statistik","Experiment_Gesamtschau","Abbildungen",plot_name)
  export.plot(plot_fct = plot_graph, path = plot_path, x=14, y=8,size=10,resol=500,format = "png")
}

plot_errorbars_bothyears(var = "abs", 
                ymin = 0,
                ymax = 100,
                label_y = "",
                label_x = "Frischbiomasse [g/m?]",
                col_gray = "gray80",
                plot_name = "frischbiomasse.png")

plot_errorbars_threeyears <- function (var = "rel", ymin = -1, ymax = 2, label_x = "test", label_y = "test", plot_name = NULL, col_gray1 = "gray60", col_gray2 = "gray80")
{
  dat_plot <- dat01
  
  dat_plot$estimate <- dat_plot[[paste0("Estimate_",var)]]
  dat_plot$lower <- dat_plot[[paste0("lowerCI_",var)]]
  dat_plot$upper <- dat_plot[[paste0("upperCI_",var)]]
  
  plot_graph <- function()
  {
    par(cex.axis = 1, cex.lab = 1, cex = 1, mgp = c(1,1,0), mar = c(4,0,0,0.5))
    
    with(data = dat_plot[which(dat_plot$year == 2018),], expr = errbar(x = fixed_effects, y = estimate, yminus = lower, yplus = upper, ylim = c(ymin,ymax), type = "n", lty = 0))
        
    #abline(v=dat_plot[which(dat_plot$year == 2018),]$estimate[1], col = col_gray1)
    #abline(v=dat_plot[which(dat_plot$year == 2019),]$estimate[1], col = col_gray2)
    #abline(v=dat_plot[which(dat_plot$year == 2020),]$estimate[1], col = "black")
    
    # bei Bedarf die folgende Zeilen ausblenden
    #with(data = dat_plot[which(dat_plot$year == 2018),], expr = errbar(x = fixed_effects, y = estimate, yminus = lower, yplus = upper, pch=19, col = col_gray1, lwd=1, cap = 10, ylim = c(ymin,ymax), errbar.col = col_gray1, add = T))
    #with(data = dat_plot[which(dat_plot$year == 2019),], expr = errbar(x = fixed_effects, y = estimate, yminus = lower, yplus = upper, pch=19, col = col_gray2, lwd=1, cap = 10, ylim = c(ymin,ymax), errbar.col = col_gray2, add = T))
    with(data = dat_plot[which(dat_plot$year == 2020),], expr = errbar(x = fixed_effects, y = estimate, yminus = lower, yplus = upper, pch=19, col = "black", lwd=1, cap = 10, ylim = c(ymin,ymax), add = T))
    
    box()
    #text(x = dat_plot[which(dat_plot$year == 2018),]$estimate[1]-10, y = 6.8, labels = "2018", col = col_gray1, pos = 4)
    #text(x = dat_plot[which(dat_plot$year == 2019),]$estimate[1]+8.5,   y = 6.8, labels = "2019", col = col_gray2, pos = 4)
    #text(x = dat_plot[which(dat_plot$year == 2020),]$estimate[1]+5, y = 6.8, labels = "2020", col = "black", pos = 4)
    
    mtext(label_x, side=1, line=2.5)
  }
  
  # naming and exporting plot, requires function export.plot, see above
  plot_path <- file.path("C:","Users","Jakob","Documents","Promotion","Statistik","Experiment","Experiment_Gesamtschau","Abbildungen",plot_name)
  export.plot(plot_fct = plot_graph, path = plot_path, x=14, y=8,size=10,resol=500,format = "png")
}

plot_errorbars_threeyears(var = "abs", 
                         ymin = 30,
                         ymax = 90,
                         label_y = "",
                         label_x = "Vegetationsdeckung [%]",
                         col_gray1 = "gray85",
                         col_gray2 = "gray60",
                         plot_name = "test04.png")
  
plot(dat_plot$estimate~dat_plot$fixed_effects)
?errbar
?mtext
as.numeric(dat_plot$fixed_effects)
